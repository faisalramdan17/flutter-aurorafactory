name: aurorafactory
description: A new Flutter project by using GetX, Solidity & Aurora Network runing in Ethereum Chain.

# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
version: 1.0.0+1

environment:
  sdk: ">=2.15.1 <3.0.0"

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.2

  # A dart library that connects to interact with the Ethereum blockchain. 
  # It connects to an Ethereum node to send transactions, interact with smart contracts and much more!
  web3dart: ^2.3.3

  # The web_socket_channel package provides StreamChannel wrappers for WebSocket connections. 
  # It provides a cross-platform WebSocketChannel API, a cross-platform implementation of 
  # that API that communicates over an underlying StreamChannel, an implementation that wraps dart:io's WebSocket class, 
  # and a similar implementation that wraps dart:html's.
  web_socket_channel: ^2.1.0

  # A composable, Future-based library for making HTTP requests.
  # This package contains a set of high-level functions and classes that make it easy to consume HTTP resources. 
  # It's multi-platform, and supports mobile, desktop, and the browser.
  http: ^0.13.4

  # GetX is an extra-light and powerful solution for Flutter. 
  # It combines high-performance state management, intelligent dependency injection, and route management quickly and practically.
  get: ^4.6.1

  # Provides internationalization and localization facilities, including message translation, plurals and genders, 
  # date/number formatting and parsing, and bidirectional text.
  intl: ^0.17.0

  fade_shimmer: ^2.0.1
  url_launcher: ^6.0.18

  # Load configuration at runtime from a .env file which can be used throughout the application.
  flutter_dotenv: ^5.0.2


  google_fonts: ^2.1.0
  flutter_svg: ^0.22.0
  fl_chart: ^0.36.1
  # provider: ^5.0.0
  data_table_2: ^2.2.0

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^1.0.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  assets:
    - .env
    - assets/images/
    - assets/icons/
    - assets/logo/
    - assets/menu/

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware.

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
